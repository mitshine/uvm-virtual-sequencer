f = open("./uvm_virtual_sequencer_codes/environment.sv", "w")

f.write('class Environment extends uvm_env;\n')
f.write(' `uvm_component_utils(Environ)\n')
f.write('\n')
f.write(' // Virtual Sequencer Handle\n')
f.write(' virtual_seqr v_sqr;\n')
f.write('\n')
f.write(' // Agents Handles\n')
f.write(' ahb_agent AHB_AGNT;\n')
f.write(' axi_agent AXI_AGNT;\n')
f.write('\n')
f.write(' // Constructor\n')
f.write(' function new (string name = "Environ", uvm_component parent);\n')
f.write('  super.new(name, parent);\n')
f.write(' endfunction: new\n')
f.write('\n')
f.write(' // Build Phase\n')
f.write(' function void build_phase (uvm_phase phase);\n')
f.write('  v_sqr = virtual_seqr::type_id::create("v_sqr");\n')
f.write('  AHB_AGNT = ahb_agent::type_id::create("AHB_AGNT");\n')
f.write('  AXI_AGNT = axi_agent::type_id::create("AXI_AGNT");\n')
f.write(' endfunction: build_phase\n')
f.write('\n')
f.write(' // Connect Phase\n')
f.write(' function void connect_phase (uvm_phase phase);\n')
f.write('  v_sqr.SQR_AHB = AHB_AGNT.m_sequencer;\n')
f.write('  v_sqr.SQR_AXI = AXI_AGNT.m_sequencer;\n')
f.write(' endfunction: connect_phase\n')
f.write('\n')
f.write('endclass: Environment\n')

f.close()

#open and read the file after the appending:
f = open("./uvm_virtual_sequencer_codes/environment.sv", "r")
print(f.read())