f = open("./uvm_virtual_sequencer_codes/my_vseq.sv", "w")

f.write('// Base Virtual Sequence\n')
f.write('class base_vseq extends uvm_sequence #(uvm_sequence_item);\n')
f.write(' `uvm_object_utils(base_vseq)\n')
f.write('\n')
f.write(' // Virtual Sequencer Handle\n')
f.write(' virtual_seqr v_sqr;\n')
f.write('\n')
f.write(' // Target Sequencers Handle\n')
f.write(' ahb_seqr SQR_AHB;\n')
f.write(' axi_seqr SQR_AXI;\n')
f.write('\n')
f.write(' // Constructor\n')
f.write(' function new (string name = "base_vseq");\n')
f.write('  super.new(name);\n')
f.write(' endfunction: new\n')
f.write('\n')
f.write(' // Body Task (Assign target sequencers handle)\n')
f.write(' task body();\n')
f.write('  if (!$cast(v_sqr, m_sequencer)) begin\n')
f.write('   `uvm_error(get_full_name(), "Virtual Seqr pointer cast failed")\n')
f.write('  end\n')
f.write('  SQR_AHB = v_sqr.SQR_AHB;\n')
f.write('  SQR_AXI = v_sqr.SQR_AXI;\n')
f.write(' endtask: body\n')
f.write('\n')
f.write('endclass: base_vseq\n')
f.write('\n')
f.write('// Virtual Sequence\n')
f.write('class my_vseq extends base_vseq;\n')
f.write(' `uvm_object_utils(my_vseq)\n')
f.write('\n')
f.write(' // Constructor\n')
f.write(' function new (string name = "my_vseq");\n')
f.write('  super.new(name);\n')
f.write(' endfunction: new\n')
f.write('\n')
f.write(' // Body Task(starting the sub-sequences)\n')
f.write(' task body();\n')
f.write('\n')
f.write('  // Assigning the Sub-Sequencer Handles\n')
f.write('  super.body;\n')
f.write('  // Sub-Sequence Creation & Execution\n')
f.write('  ahb_sequence ahb_seq;\n')
f.write('  axi_sequence axi_seq;\n')
f.write('\n')
f.write('  ahb_seq = ahb_sequence::type_id::create("ahb_seq");\n')
f.write('  axi_seq = axi_sequence::type_id::create("axi_seq");\n')
f.write('\n')
f.write('  repeat(30) begin\n')
f.write('   ahb_seq.start(SQR_AHB);\n')
f.write('   axi_seq.start(SQR_AXI);\n')
f.write('  end\n')
f.write('\n')
f.write(' endtask: body\n')
f.write('\n')
f.write('endclass: my_vseq\n')

f.close()

#open and read the file after the appending:
f = open("./uvm_virtual_sequencer_codes/my_vseq.sv", "r")
print(f.read())