f = open("./uvm_virtual_sequencer_codes/test.sv", "w")

f.write('class Test extends uvm_test;\n')
f.write(' `uvm_component_utils(Test)\n')
f.write('\n')
f.write(' // Instantiations\n')
f.write(' my_vseq vseq;\n')
f.write(' Environment Env;\n')
f.write(' // Constructor\n')
f.write(' function new (string name = "Test", uvm_component parent = null);\n')
f.write('  super.new(name, parent);\n')
f.write(' endfunction: new\n')
f.write('\n')
f.write(' // Build Phase\n')
f.write('function void build_phase (uvm_phase phase);\n')
f.write('   Env  = Environ::type_id::create("Env");\n')
f.write('endfunction: build_phase\n')
f.write('\n')
f.write(' // Run Phase\n')
f.write(' task run_phase (uvm_phase phase);\n')
f.write('   // Create the Virtual Sequence & Environment\n')
f.write('   vseq = my_vseq::type_id::create("vseq");\n')
f.write('   phase.raise_objection(this);\n')
f.write('   // Start the Virtual Sequence\n')
f.write('   vseq.start(Env.v_sqr);\n')
f.write('   phase.drop_objection(this);\n')
f.write(' endtask: run_phase\n')
f.write('\n')
f.write('endclass: Test\n')

f.close()

#open and read the file after the appending:
f = open("./uvm_virtual_sequencer_codes/test.sv", "r")
print(f.read())